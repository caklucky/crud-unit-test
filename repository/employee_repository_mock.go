package repository

import (
	models "github.com/caklucky/crud-unit-test/models"
	mock "github.com/stretchr/testify/mock"
)

// EmployeeRepository is an autogenerated mock type for the EmployeeRepository type
type EmployeeRepositoryMock struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *EmployeeRepositoryMock) Delete(id string) error {
	ret := _m.Called(id)
	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Find provides a mock function with given fields:
func (_m *EmployeeRepositoryMock) Find() ([]models.Employee, error) {
	ret := _m.Called()
	var r0 []models.Employee
	if rf, ok := ret.Get(0).(func() []models.Employee); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Employee)
		}
	}
	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// FindById provides a mock function with given fields: id
func (_m *EmployeeRepositoryMock) FindById(id string) (models.Employee, error) {
	ret := _m.Called(id)
	var r0 models.Employee
	if rf, ok := ret.Get(0).(func(string) models.Employee); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Employee)
	}
	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Insert provides a mock function with given fields: employee
func (_m *EmployeeRepositoryMock) Insert(employee models.Employee) error {
	ret := _m.Called(employee)
	var r0 error
	if rf, ok := ret.Get(0).(func(models.Employee) error); ok {
		r0 = rf(employee)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Update provides a mock function with given fields: employee
func (_m *EmployeeRepositoryMock) Update(employee models.Employee) error {
	ret := _m.Called(employee)
	var r0 error
	if rf, ok := ret.Get(0).(func(models.Employee) error); ok {
		r0 = rf(employee)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}
